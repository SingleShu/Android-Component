apply plugin: 'com.netease.customplugin'

android {
    compileSdkVersion 26
    defaultConfig {
        applicationId "com.example.administrator.androidcomponent"
        minSdkVersion 14
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [host: rootProject.ext.appComponent]
            }
        }
    }
    dataBinding {
        enabled = true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    resourcePrefix "app_"
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.android.support:support-v4:26.1.0'
    annotationProcessor 'com.netease.up:routerCompiler:1.0.0'
    implementation project(':componentservice')
}

upBuildGradle {
    applicationName = 'com.example.administrator.androidcomponent.AppApplication'
    isAutoRegisterComponent = true
}

/**
 * 外部传递数据
 */
Closure testClosure = {
    String name,int age ->
        println("============== testClosure my name is $name,my age is $age =====================")
}

/**
 * 参数和闭包同时作为参数
 */
def testClosure2(String name,Closure closure) {
    println("=========== testClosure2 my name is $name================")
    closure()
}

task mytask {
    testClosure('UP游戏社区',20)
    testClosure2("UP游戏库",{
        println("来自参数闭包的打印")
    })
}
